"webkit" {
	"sync"
	"time"
}

taskFunc => (int->error) 

# WebBenchmark 基准测试类型 #
WebBenchmark -> {
	cli ?WebClient
}

# NewWebBenchmark 构建基准测试函数 #
NewWebBenchmark(cli ?WebClient -> v ?WebBenchmark) {
	<- WebBenchmark{cli}?
}

# Run single API 单个API基准测试 #
me ?WebBenchmark -> {
	RunSingleAPI(tps int, rounds int, interval time.Duration, req (?WebClient, int->error) -> count BenchmarkCount) {
		api(index int -> e error) {
			<- req(me.cli, index)
		}
		<- RunBenchmark(tps, rounds, interval, api)
	}
}

# BenchmarkCount 基准测试统计 #
BenchmarkCount -> {
	Begin          	time.Time
	End            	time.Time
	RoundCount    	[]int:?RoundCount
}

# RoundCount 单轮统计 #
RoundCount -> {
	Begin          	time.Time
	End            	time.Time
	TaskCounts    	[]int:?TaskCount
}

# TaskCount 单次统计 #
TaskCount -> {
	Begin      	time.Time
	End         time.Time
	Status      bool
}

# RunBenchmark 一次基准测试 #
RunBenchmark(tps int, rounds int, interval time.Duration, task taskFunc -> count BenchmarkCount) {
	benchmarkBegin = time.Now()
	wg = sync.WaitGroup{}?
	wg.Add(rounds)
	roundCount = []int:?RoundCount{}
	r @ 0 ..< rounds {
		runRound(r, roundCount, tps, wg, task) <~
		# 延时等待 #
		time.Sleep(interval * time.Millisecond)
	}
	wg.Wait()
	benchmarkEnd = time.Now()
	<- BenchmarkCount{benchmarkBegin, benchmarkEnd, roundCount}
}

# runRound 一轮并发 #
runRound(index int, countMap []int:?RoundCount, tps int, wg ?sync.WaitGroup, task taskFunc ->) {
	roundWG = sync.WaitGroup{}?
	roundWG.Add(tps)
	taskCount = []int:?TaskCount{}
	roundBegin = time.Now()
	t @ 0 ..< tps {
		runTask(t, taskCount, roundWG, task) <~
	}
	roundWG.Wait()
	roundEnd = time.Now()
	countMap.(index) = RoundCount{roundBegin, roundEnd, taskCount}?
	wg.Done()
}

# runTask 单个任务 #
runTask(index int, countMap []int:?TaskCount, wg ?sync.WaitGroup, task taskFunc ->) {
	taskBegin = time.Now()
	err = task(index)
	taskEnd = time.Now()
	isSuccess = true
	? err >< nil {
		isSuccess = false
	}
	countMap.(index) = TaskCount{taskBegin, taskEnd, isSuccess}?
	wg.Done()
}
